{
  "createdAt": "2025-08-13T00:53:47.608Z",
  "updatedAt": "2025-08-13T00:54:46.000Z",
  "id": "l53ruRcuopLiS8Ca",
  "name": "Rag 2.0 Template",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.data || $json.text || $json.concatenated_data }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "=file_id",
                "value": "={{ $('Set File ID').first().json.file_id }}"
              },
              {
                "name": "file_title",
                "value": "={{ $('Set File ID').first().json.file_title }}"
              }
            ]
          }
        }
      },
      "id": "03f41004-8132-437a-bd8f-35f07325413b",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        1568,
        1280
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "1c7f807c-2c93-4a01-b038-51eb927f22d2",
      "name": "Embeddings OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        1328,
        1280
      ]
    },
    {
      "parameters": {
        "content": "## Agent Tools for RAG",
        "height": 528.85546469693,
        "width": 583.4552380860637,
        "color": 4
      },
      "id": "85b54829-d177-4892-9920-ec6f4eb521c5",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        560,
        144
      ]
    },
    {
      "parameters": {
        "content": "## Tool to Add a Google Drive File to Vector DB",
        "height": 867,
        "width": 3073,
        "color": 5
      },
      "id": "a6eafa59-09c7-4c3c-bf8d-90a048fd32d6",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1184,
        688
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set File ID').item.json.file_id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "id": "d8e8a82a-4a50-4e04-b9cb-9113926d8c20",
      "name": "Download File",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -96,
        960
      ],
      "executeOnce": true
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1S_XSwz1z3EH4Cnivl7Ls_RGTqlO7L0bb",
          "mode": "list",
          "cachedResultName": "1) RAG Demo",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1S_XSwz1z3EH4Cnivl7Ls_RGTqlO7L0bb"
        },
        "event": "fileCreated",
        "options": {}
      },
      "id": "c325981e-eec4-4274-a387-19176f658130",
      "name": "File Created",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -1168,
        800
      ]
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1S_XSwz1z3EH4Cnivl7Ls_RGTqlO7L0bb",
          "mode": "list",
          "cachedResultName": "1) RAG Demo",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1S_XSwz1z3EH4Cnivl7Ls_RGTqlO7L0bb"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "b06a1afc-b2a0-462b-ae6b-9f0f91e96bd2",
      "name": "File Updated",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -1168,
        1088
      ]
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "a120d19b-2b60-4a38-ac5d-611bc90d0b01",
      "name": "Extract Document Text",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        768,
        1280
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').item.json.query.sessionId }}"
      },
      "id": "63332588-4e58-4398-a3c3-b4ca087436af",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1,
      "position": [
        -176,
        512
      ],
      "notesInFlow": false
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "documents",
        "filterType": "string",
        "filterString": "=metadata->>file_id=like.*{{ $json.file_id }}*"
      },
      "id": "4bc715bc-5e8f-4af2-9f97-29f0f0a5dee5",
      "name": "Delete Old Doc Rows",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -576,
        800
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $json.mimeType }}",
              "type": "string"
            },
            {
              "id": "77d782de-169d-4a46-8a8e-a3831c04d90f",
              "name": "file_title",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "9bde4d7f-e4f3-4ebd-9338-dce1350f9eab",
              "name": "file_url",
              "value": "={{ $json.webViewLink }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "ebb07ab1-0711-4db1-952f-a3216c182068",
      "name": "Set File ID",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -768,
        960
      ]
    },
    {
      "parameters": {
        "content": "## RAG AI Agent with Chat Interface",
        "height": 464.8027193303974,
        "width": 1035.6381264595484
      },
      "id": "6cda3fe2-02d0-4c0f-9120-ed0f6e5f3e99",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -480,
        208
      ]
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "81a453e9-9855-4e33-83b0-2025d284d5ea",
      "name": "Extract PDF Text",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        768,
        720
      ]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "9912db8d-229c-4114-b957-6f5eeb2e647d",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        800,
        912
      ]
    },
    {
      "parameters": {},
      "id": "effd9e5f-9545-425f-9647-9ff083edb4c4",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        1472,
        1408
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "1617ac32-5865-4c38-9424-c463730f327f",
      "name": "Summarize",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        1008,
        992
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query.message }}",
        "options": {
          "systemMessage": "=You are a personal assistant who answers questions from documents (text-based or tabular).\n\nSEARCH APPROACH:\n1. Start with RAG for most questions about concepts, ideas, or general information\n2. Use SQL for numerical/tabular questions (sums, averages, trends, comparisons)\n3. If SQL results are null or error occurs, fall back to document extraction\n\nDOCUMENT TYPES:\n- Text documents (Docs, PDFs, TXT): Use RAG to retrieve relevant passages\n- Tabular data (CSV, Excel): Use SQL for analysis and RAG for context\n\nDATASET IDENTIFICATION (CRITICAL):\n- NEVER use shortened dataset_ids - always use the full Google Drive ID\n- First query: \"SELECT DISTINCT dataset_id FROM document_rows\"\n- Sample data: \"SELECT dataset_id, row_data FROM document_rows LIMIT 10\"\n- Dataset IDs are long strings like \"1yKgRj62UCOBcabx7NiMjRrpsmWGAmohmkHfVKjnxp5I\"\n\nSQL FORMATTING RULES (when using SQL):\n- NEVER use '$' directly - ALWAYS use CHR(36) instead\n- ALWAYS REMOVE COMMAS from currency: REPLACE(REPLACE(row_data->>'Field', CHR(36), ''), ',', '')::numeric\n- ALWAYS quote the FULL dataset_id values\n\nREASONING PROCESS:\n1. Determine if the question is about concepts/text (use RAG) or numerical analysis (use SQL)\n2. For text-based questions, use the RAG tool first\n3. For numerical/tabular questions, identify relevant datasets before querying\n4. If one approach fails, try the alternative approach\n\nRESPONSE QUALITY:\n- Cite specific data sources\n- Be transparent about limitations\n- Never fabricate information"
        }
      },
      "id": "8e5684a0-7073-4847-974c-94f066cd3260",
      "name": "RAG AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -48,
        288
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "2ae7faa7-a936-4621-a680-60c512163034",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "fc193b06-363b-4699-a97d-e5a850138b0e",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "=application/vnd.google-apps.spreadsheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "b69f5605-0179-4b02-9a32-e34bb085f82d",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/vnd.google-apps.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": 3
        }
      },
      "id": "b65cd26f-5d13-4a89-9963-7e2f65aecb6b",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        112,
        944
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "6c6c7386-8887-4fbb-a151-c907ecf179e7",
      "name": "Insert into Supabase Vectorstore",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        1488,
        1072
      ]
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "id": "6fbfa942-02f8-40e3-bb3c-e98ed1c9f7e0",
      "name": "Extract from Excel",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        592,
        912
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f422e2e0-381c-46ea-8f38-3f58c501d8b9",
              "name": "schema",
              "value": "={{ $('Extract from Excel').isExecuted ? $('Extract from Excel').first().json.keys().toJsonString() : $('Extract from CSV').first().json.keys().toJsonString() }}",
              "type": "string"
            },
            {
              "id": "bb07c71e-5b60-4795-864c-cc3845b6bc46",
              "name": "data",
              "value": "={{ $json.concatenated_data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1440,
        848
      ],
      "id": "c36533ff-3065-44b9-9187-3b34d71e3a40",
      "name": "Set Schema"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        592,
        1088
      ],
      "id": "0e1f0197-0e6d-4155-ae2b-13d15e169d2f",
      "name": "Extract from CSV"
    },
    {
      "parameters": {
        "content": "## Run Each Node Once to Set Up Database Tables",
        "height": 300,
        "width": 680,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1184,
        368
      ],
      "typeVersion": 1,
      "id": "03c3531e-b733-4562-8187-4f79c2b7dde1",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE document_metadata (\n    id TEXT PRIMARY KEY,\n    title TEXT,\n    url TEXT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    schema TEXT\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -928,
        464
      ],
      "id": "da1a9f69-3afb-4fed-89ef-e6ac88c02d69",
      "name": "Create Document Metadata Table"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE document_rows (\n    id SERIAL PRIMARY KEY,\n    dataset_id TEXT REFERENCES document_metadata(id),\n    row_data JSONB  -- Store the actual row data\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -704,
        464
      ],
      "id": "c9f5f450-2592-400f-af01-981de202d808",
      "name": "Create Document Rows Table (for Tabular Data)"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file.",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        48,
        512
      ],
      "id": "fbdd8f53-b711-4e12-a090-2c6395bee693",
      "name": "List Documents"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Given a file ID, fetches the text from the document.",
        "operation": "executeQuery",
        "query": "SELECT \n    string_agg(content, ' ') as document_text\nFROM documents\n  WHERE metadata->>'file_id' = $1\nGROUP BY metadata->>'file_id';",
        "options": {
          "queryReplacement": "={{ $fromAI('file_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        208,
        512
      ],
      "id": "cc72a5c3-306e-4822-b2f2-5473c9d2f8e6",
      "name": "Get File Contents"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Run SQL queries on document_rows table. CRITICAL: Use COMPLETE dataset_id (e.g. \"1yKgRj62UCOBcabx7NiMjRrpsmWGAmohmkHfVKjnxp5I\").\n\nExamples:\n1) Identify datasets: \nSELECT DISTINCT dataset_id FROM document_rows\n\n2) Format numeric values (IMPORTANT - remove BOTH $ AND commas):\nSELECT (REPLACE(REPLACE(row_data->>'Profit', CHR(36), ''), ',', ''))::numeric AS Profit\nFROM document_rows\nWHERE dataset_id = '1yKgRj62UCOBcabx7NiMjRrpsmWGAmohmkHfVKjnxp5I'\n\n3) Always use double REPLACE for currency: \nREPLACE(REPLACE(value, CHR(36), ''), ',', '')::numeric",
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        368,
        512
      ],
      "id": "17be8a4d-ee79-41bc-a50b-7a7a1459b8d3",
      "name": "Query Document Rows"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Use RAG to look up information in the knowledgebase.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        704,
        272
      ],
      "id": "52323783-8e97-4a95-bbfc-197b057120b0",
      "name": "Supabase Vector Store1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        848,
        480
      ],
      "id": "e2433764-e538-4ada-aa84-e856f8e812e5",
      "name": "Embeddings OpenAI2"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -944,
        800
      ],
      "id": "e2151ef9-5bf3-48ea-a5c0-8cf0c4ac0bc2",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Enable the pgvector extension to work with embedding vectors\ncreate extension vector;\n\n-- Create a table to store your documents\ncreate table documents (\n  id bigserial primary key,\n  content text, -- corresponds to Document.pageContent\n  metadata jsonb, -- corresponds to Document.metadata\n  embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed\n);\n\n-- Create a function to search for documents\ncreate function match_documents (\n  query_embedding vector(1536),\n  match_count int default null,\n  filter jsonb DEFAULT '{}'\n) returns table (\n  id bigint,\n  content text,\n  metadata jsonb,\n  similarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_column\nbegin\n  return query\n  select\n    id,\n    content,\n    metadata,\n    1 - (documents.embedding <=> query_embedding) as similarity\n  from documents\n  where metadata @> filter\n  order by documents.embedding <=> query_embedding\n  limit match_count;\nend;\n$$;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1120,
        464
      ],
      "id": "c5f80d65-0689-4afe-809f-3ec85be425a7",
      "name": "Create Documents Table and Match Function"
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "document_rows",
        "filters": {
          "conditions": [
            {
              "keyName": "dataset_id",
              "condition": "eq",
              "keyValue": "={{ $('Set File ID').item.json.file_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -416,
        960
      ],
      "id": "174cb267-a814-460f-96f5-b108291acbc0",
      "name": "Delete Old Data Rows",
      "alwaysOutputData": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Set File ID').item.json.file_id }}",
            "title": "={{ $('Set File ID').item.json.file_title }}",
            "url": "={{ $('Set File ID').item.json.file_url }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -256,
        832
      ],
      "id": "7fb9950c-5989-4b39-87d0-2095dc307ada",
      "name": "Insert Document Metadata",
      "executeOnce": true
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_rows",
          "mode": "list",
          "cachedResultName": "document_rows"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "dataset_id": "={{ $('Set File ID').item.json.file_id }}",
            "row_data": "={{ $json.toJsonString().replaceAll(/'/g, \"''\") }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "dataset_id",
              "displayName": "dataset_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_data",
              "displayName": "row_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        800,
        1088
      ],
      "id": "66386f50-6b49-464b-9486-db226c07ac0d",
      "name": "Insert Table Rows"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Set File ID').item.json.file_id }}",
            "schema": "={{ $json.schema }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1664,
        848
      ],
      "id": "e829e1fe-2f8c-4dae-8167-4b8a33937adb",
      "name": "Update Schema for Document Metadata"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "queryString": "'1S_XSwz1z3EH4Cnivl7Ls_RGTqlO7L0bb' in parents and trashed=false",
        "returnAll": true,
        "filter": {},
        "options": {
          "fields": [
            "id"
          ]
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -768,
        1728
      ],
      "id": "a699d6fd-02fb-4f08-b7d4-fbb15e529d05",
      "name": "Get File IDs"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -480,
        1808
      ],
      "id": "f41412ca-4a50-48a5-a984-27567adc10c3",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "documents",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -768,
        1888
      ],
      "id": "80c82e36-4682-4b13-8f98-fb7284fc75da",
      "name": "Supabase"
    },
    {
      "parameters": {
        "jsCode": "// Grab the raw data from all inputs\nconst inputData = $input.all().map(item => item.json);\n\n// Separate out the Google Drive items (no \"metadata\") vs. Supabase items (have \"metadata\")\nconst googleDriveItems = inputData.filter(item => item.id && !item.metadata);\nconst supabaseItems = inputData.filter(item => item.metadata);\n\n// Extract just the file IDs from Google Drive\nconst googleDriveIds = googleDriveItems.map(item => item.id);\n\n// Build a Set for quick membership checks (recommended for large arrays)\nconst driveIdSet = new Set(googleDriveIds);\n\n// Filter Supabase rows to find those whose file_id is not in the Drive set\nconst orphanedSupabaseRows = supabaseItems.filter(item => {\n  return !driveIdSet.has(item.metadata.file_id);\n});\n\n// Return each orphaned row as a separate n8n item\nreturn orphanedSupabaseRows.map(row => ({ json: row }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -256,
        1808
      ],
      "id": "0f25f2b8-9241-4db0-9099-6fc5f805a1cd",
      "name": "Code1"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1168,
        2192
      ],
      "id": "b21553da-7241-4636-81e2-9cdd0c6d54c0",
      "name": "Schedule Trigger",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1168,
        2032
      ],
      "id": "46a21e16-219a-4cdc-bab5-00c11bed15c6",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "documents",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -48,
        1808
      ],
      "id": "e6a46aff-5ddc-4ded-ab5e-26f2b011c81f",
      "name": "Delete Rows"
    },
    {
      "parameters": {
        "content": "## RAG: Clean up",
        "height": 1260,
        "width": 1440,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1200,
        1632
      ],
      "id": "71e72ff7-55c2-4c77-b0f7-1bdf08639ac2",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "# Rag 2.0 Template",
        "height": 80,
        "width": 360,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "6de09e03-99be-411c-af9c-844271f4508f",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "queryString": "'1S_XSwz1z3EH4Cnivl7Ls_RGTqlO7L0bb' in parents and trashed=false",
        "returnAll": true,
        "filter": {},
        "options": {
          "fields": [
            "id"
          ]
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -768,
        2048
      ],
      "id": "ed56299d-6f89-4807-bb6f-5892dd90713f",
      "name": "Get File IDs1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -464,
        2112
      ],
      "id": "a4381815-e762-40fc-8a10-dab006bf666c",
      "name": "Merge1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "document_rows",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -768,
        2208
      ],
      "id": "bdb461e9-2c51-476b-9045-fe28942d3b3a",
      "name": "Supabase1"
    },
    {
      "parameters": {
        "jsCode": "// This code identifies document_metadata records where the Google Drive file no longer exists\n\n// Log the input structure for debugging\nconsole.log(\"Number of items:\", items.length);\nif (items.length > 0) {\n  console.log(\"First item type:\", typeof items[0].json);\n  if (items[0].json) {\n    console.log(\"First item keys:\", Object.keys(items[0].json));\n  }\n}\n\n// Create a Set to hold Google Drive file IDs\nconst googleDriveFileIds = new Set();\n\n// Check if the first input is a Google Drive file or a Google Drive files list\nif (items.length > 0 && items[0].json) {\n  // If the first item has a 'files' property, it's a Google Drive files list\n  if (items[0].json.files && Array.isArray(items[0].json.files)) {\n    // Multiple files format\n    for (const file of items[0].json.files) {\n      if (file && file.id) {\n        googleDriveFileIds.add(file.id);\n      }\n    }\n    console.log(\"Found Google Drive files list with\", googleDriveFileIds.size, \"files\");\n  } \n  // If the first item has an 'id' property, it's a single Google Drive file\n  else if (items[0].json.id) {\n    googleDriveFileIds.add(items[0].json.id);\n    console.log(\"Found single Google Drive file with ID:\", items[0].json.id);\n  }\n  // If neither, assume no Google Drive files found\n  else {\n    console.log(\"No Google Drive files found in first item\");\n  }\n}\n\nconsole.log(\"Total Google Drive file IDs found:\", googleDriveFileIds.size);\n\n// Determine which items are metadata records\nlet metadataRecords = [];\nlet metadataStartIndex = 1; // Default to starting from second item\n\n// If the first item doesn't have Google Drive files, it might be a metadata record\nif (items.length > 0 && items[0].json && !items[0].json.files && \n    items[0].json.title && items[0].json.url && items[0].json.created_at) {\n  // The first item looks like a metadata record\n  metadataStartIndex = 0;\n}\n\n// Get all metadata records\nmetadataRecords = items.slice(metadataStartIndex).map(item => item.json).filter(Boolean);\nconsole.log(\"Found metadata records:\", metadataRecords.length);\n\n// Find document_metadata records to delete (where id doesn't exist in Google Drive)\nconst recordsToDelete = [];\n\n// If there are no Google Drive files, mark all metadata records for deletion\nif (googleDriveFileIds.size === 0) {\n  console.log(\"No Google Drive files found, marking all metadata records for deletion\");\n  for (const record of metadataRecords) {\n    if (record && record.id) {\n      recordsToDelete.push({\n        ...record,\n        _shouldDelete: true\n      });\n    }\n  }\n} \n// Otherwise, only mark records where the ID is not in Google Drive\nelse {\n  for (const record of metadataRecords) {\n    if (!record || !record.id) continue;\n    \n    if (!googleDriveFileIds.has(record.id)) {\n      recordsToDelete.push({\n        ...record,\n        _shouldDelete: true\n      });\n    }\n  }\n}\n\nconsole.log(\"Metadata records to delete:\", recordsToDelete.length);\n\n// Return the records that should be deleted\nreturn recordsToDelete;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        2112
      ],
      "id": "0fbfb08f-4d41-4d2d-835e-c7fa742a38d3",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "document_rows",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "dataset_id",
              "condition": "eq",
              "keyValue": "={{ $json.dataset_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -16,
        2112
      ],
      "id": "37a1dd04-f107-4c79-ba5a-50efee4e2100",
      "name": "Delete Rows1"
    },
    {
      "parameters": {
        "path": "433709cf-fbc1-4a64-84aa-e9cdea16b6f5",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -240,
        288
      ],
      "id": "4781453c-c768-4754-9920-755b45175896",
      "name": "Webhook",
      "webhookId": "433709cf-fbc1-4a64-84aa-e9cdea16b6f5"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        368,
        288
      ],
      "id": "85f05e56-76c9-4802-bcbb-8388f8d1c38d",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "queryString": "'1S_XSwz1z3EH4Cnivl7Ls_RGTqlO7L0bb' in parents and trashed=false",
        "returnAll": true,
        "filter": {},
        "options": {
          "fields": [
            "id"
          ]
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -768,
        2448
      ],
      "id": "be9755e2-6d1e-49ef-bb44-96f544cecb49",
      "name": "Get File IDs2"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "document_metadata",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -768,
        2624
      ],
      "id": "bd001afc-832c-4312-8c96-cee1b9ee8bd4",
      "name": "Supabase2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -448,
        2480
      ],
      "id": "593f61c0-46f2-4b41-acd2-032f452d49f3",
      "name": "Merge2"
    },
    {
      "parameters": {
        "jsCode": "// Simple code to handle empty Google Drive\n\n// Determine if we have Google Drive data\nlet hasDriveData = false;\nlet driveFileIds = new Set();\n\n// Check the first item to see if it's a Google Drive file or a file list\nif (items[0] && items[0].json) {\n  // Is it a files array?\n  if (items[0].json.files && Array.isArray(items[0].json.files)) {\n    hasDriveData = true;\n    for (const file of items[0].json.files) {\n      if (file && file.id) driveFileIds.add(file.id);\n    }\n  }\n  // Is it a single file with no metadata-like properties?\n  else if (items[0].json.id && !items[0].json.title && !items[0].json.created_at) {\n    hasDriveData = true;\n    driveFileIds.add(items[0].json.id);\n  }\n}\n\nconsole.log(\"Has Drive data:\", hasDriveData);\nconsole.log(\"Drive file IDs:\", Array.from(driveFileIds));\n\n// Determine which items are metadata records\nlet metadataRecords = [];\n\n// If the first item looks like a metadata record (has title, url, created_at)\nif (!hasDriveData) {\n  // All items are metadata records\n  metadataRecords = items.map(item => item.json).filter(Boolean);\n  console.log(\"All items are metadata records:\", metadataRecords.length);\n} else {\n  // Only items after the first are metadata records\n  metadataRecords = items.slice(1).map(item => item.json).filter(Boolean);\n  console.log(\"Items after first are metadata records:\", metadataRecords.length);\n}\n\n// If there are no Drive files, mark all metadata records for deletion\nconst recordsToDelete = [];\n\nif (driveFileIds.size === 0) {\n  console.log(\"No Drive files, marking ALL metadata records for deletion\");\n  for (const record of metadataRecords) {\n    if (record && record.id) {\n      recordsToDelete.push({\n        ...record,\n        _shouldDelete: true\n      });\n    }\n  }\n} else {\n  // Otherwise, only mark records not in Drive\n  console.log(\"Checking metadata records against Drive files\");\n  for (const record of metadataRecords) {\n    if (record && record.id && !driveFileIds.has(record.id)) {\n      recordsToDelete.push({\n        ...record,\n        _shouldDelete: true\n      });\n    }\n  }\n}\n\nconsole.log(\"Records to delete:\", recordsToDelete.length);\nreturn recordsToDelete;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -224,
        2480
      ],
      "id": "1b7627e3-396d-453e-8333-3c8c38964789",
      "name": "Code2"
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "document_metadata",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        0,
        2480
      ],
      "id": "ce49cef4-1b04-466d-9d45-9f8e0f0dea98",
      "name": "Delete Rows2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -336,
        464
      ],
      "id": "4d990f9d-b2fd-473a-8b0f-fd7de0efca46",
      "name": "OpenAI Chat Model"
    }
  ],
  "connections": {
    "Download File": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Created": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Document Text": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Doc Rows": {
      "main": [
        [
          {
            "node": "Delete Old Data Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID": {
      "main": [
        [
          {
            "node": "Delete Old Doc Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Updated": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PDF Text": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Set Schema",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract PDF Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from Excel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from CSV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Document Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Excel": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert Table Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Schema": {
      "main": [
        [
          {
            "node": "Update Schema for Document Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from CSV": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert Table Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Document Metadata Table": {
      "main": [
        [
          {
            "node": "Create Document Rows Table (for Tabular Data)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Documents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get File Contents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Query Document Rows": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set File ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert into Supabase Vectorstore": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Documents Table and Match Function": {
      "main": [
        [
          {
            "node": "Create Document Metadata Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Data Rows": {
      "main": [
        [
          {
            "node": "Insert Document Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Document Metadata": {
      "main": [
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File IDs": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Delete Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Get File IDs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get File IDs1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Supabase1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get File IDs2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Supabase2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File IDs1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Delete Rows1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "RAG AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Delete Rows2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File IDs2": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase2": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {
    "File Created": [
      {
        "json": {
          "kind": "drive#file",
          "copyRequiresWriterPermission": false,
          "writersCanShare": true,
          "viewedByMe": true,
          "mimeType": "application/vnd.google-apps.document",
          "exportLinks": {
            "application/rtf": "https://docs.google.com/feeds/download/documents/export/Export?id=1Dgge0lUlk3co7P93TvbtM0LMnkinpzzMo4TQPJlyEQM&exportFormat=rtf",
            "application/vnd.oasis.opendocument.text": "https://docs.google.com/feeds/download/documents/export/Export?id=1Dgge0lUlk3co7P93TvbtM0LMnkinpzzMo4TQPJlyEQM&exportFormat=odt",
            "text/html": "https://docs.google.com/feeds/download/documents/export/Export?id=1Dgge0lUlk3co7P93TvbtM0LMnkinpzzMo4TQPJlyEQM&exportFormat=html",
            "application/pdf": "https://docs.google.com/feeds/download/documents/export/Export?id=1Dgge0lUlk3co7P93TvbtM0LMnkinpzzMo4TQPJlyEQM&exportFormat=pdf",
            "text/markdown": "https://docs.google.com/feeds/download/documents/export/Export?id=1Dgge0lUlk3co7P93TvbtM0LMnkinpzzMo4TQPJlyEQM&exportFormat=markdown",
            "application/epub+zip": "https://docs.google.com/feeds/download/documents/export/Export?id=1Dgge0lUlk3co7P93TvbtM0LMnkinpzzMo4TQPJlyEQM&exportFormat=epub",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document": "https://docs.google.com/feeds/download/documents/export/Export?id=1Dgge0lUlk3co7P93TvbtM0LMnkinpzzMo4TQPJlyEQM&exportFormat=docx",
            "text/plain": "https://docs.google.com/feeds/download/documents/export/Export?id=1Dgge0lUlk3co7P93TvbtM0LMnkinpzzMo4TQPJlyEQM&exportFormat=txt"
          },
          "parents": [
            "1S_XSwz1z3EH4Cnivl7Ls_RGTqlO7L0bb"
          ],
          "thumbnailLink": "https://lh3.googleusercontent.com/drive-storage/AJQWtBPTKQpJiRaRC_JK09g-JM6xG1nPbJPC2UkOqJguDhWyaTHKe879riBCRT4gkvWn_qWcTTdYOlQJuOwxsl-je8xt3QYQZnaW10eJi9CwM2q4WvcXj73u6UQEUUg4=s220",
          "iconLink": "https://drive-thirdparty.googleusercontent.com/16/type/application/vnd.google-apps.document",
          "shared": false,
          "lastModifyingUser": {
            "displayName": "Chase Hannegan",
            "kind": "drive#user",
            "me": true,
            "permissionId": "12966415566161546567",
            "emailAddress": "hanneganc@gmail.com",
            "photoLink": "https://lh3.googleusercontent.com/a/ACg8ocIleOZQ2ZsPeLbzVj8DXpAHCLbIOAH-n0vULXMv2zSg2vBt=s64"
          },
          "owners": [
            {
              "displayName": "Chase Hannegan",
              "kind": "drive#user",
              "me": true,
              "permissionId": "12966415566161546567",
              "emailAddress": "hanneganc@gmail.com",
              "photoLink": "https://lh3.googleusercontent.com/a/ACg8ocIleOZQ2ZsPeLbzVj8DXpAHCLbIOAH-n0vULXMv2zSg2vBt=s64"
            }
          ],
          "webViewLink": "https://docs.google.com/document/d/1Dgge0lUlk3co7P93TvbtM0LMnkinpzzMo4TQPJlyEQM/edit",
          "size": "4475",
          "viewersCanCopyContent": true,
          "permissions": [
            {
              "id": "12966415566161546567",
              "displayName": "Chase Hannegan",
              "type": "user",
              "kind": "drive#permission",
              "photoLink": "https://lh3.googleusercontent.com/a/ACg8ocIleOZQ2ZsPeLbzVj8DXpAHCLbIOAH-n0vULXMv2zSg2vBt=s64",
              "emailAddress": "hanneganc@gmail.com",
              "role": "owner",
              "deleted": false,
              "pendingOwner": false
            }
          ],
          "hasThumbnail": true,
          "spaces": [
            "drive"
          ],
          "id": "1Dgge0lUlk3co7P93TvbtM0LMnkinpzzMo4TQPJlyEQM",
          "name": "Meeting Minutes Mar 12",
          "starred": false,
          "trashed": false,
          "explicitlyTrashed": false,
          "createdTime": "2025-03-12T16:43:39.796Z",
          "modifiedTime": "2025-03-12T18:41:10.367Z",
          "modifiedByMeTime": "2025-03-12T18:41:10.367Z",
          "viewedByMeTime": "2025-03-12T18:41:10.367Z",
          "quotaBytesUsed": "4475",
          "version": "19",
          "ownedByMe": true,
          "isAppAuthorized": false,
          "capabilities": {
            "canChangeViewersCanCopyContent": true,
            "canEdit": true,
            "canCopy": true,
            "canComment": true,
            "canAddChildren": false,
            "canDelete": true,
            "canDownload": true,
            "canListChildren": false,
            "canRemoveChildren": false,
            "canRename": true,
            "canTrash": true,
            "canReadRevisions": true,
            "canChangeCopyRequiresWriterPermission": true,
            "canMoveItemIntoTeamDrive": true,
            "canUntrash": true,
            "canModifyContent": true,
            "canMoveItemOutOfDrive": true,
            "canAddMyDriveParent": false,
            "canRemoveMyDriveParent": true,
            "canMoveItemWithinDrive": true,
            "canShare": true,
            "canMoveChildrenWithinDrive": false,
            "canModifyContentRestriction": true,
            "canChangeSecurityUpdateEnabled": false,
            "canAcceptOwnership": false,
            "canReadLabels": false,
            "canModifyLabels": false,
            "canModifyEditorContentRestriction": true,
            "canModifyOwnerContentRestriction": true,
            "canRemoveContentRestriction": false,
            "canDisableInheritedPermissions": false,
            "canEnableInheritedPermissions": true
          },
          "thumbnailVersion": "4",
          "modifiedByMe": true,
          "permissionIds": [
            "12966415566161546567"
          ],
          "linkShareMetadata": {
            "securityUpdateEligible": false,
            "securityUpdateEnabled": true
          },
          "inheritedPermissionsDisabled": false
        }
      },
      {
        "json": {
          "kind": "drive#file",
          "copyRequiresWriterPermission": false,
          "writersCanShare": true,
          "viewedByMe": true,
          "mimeType": "application/vnd.google-apps.spreadsheet",
          "exportLinks": {
            "application/x-vnd.oasis.opendocument.spreadsheet": "https://docs.google.com/spreadsheets/export?id=1yKgRj62UCOBcabx7NiMjRrpsmWGAmohmkHfVKjnxp5I&exportFormat=ods",
            "text/tab-separated-values": "https://docs.google.com/spreadsheets/export?id=1yKgRj62UCOBcabx7NiMjRrpsmWGAmohmkHfVKjnxp5I&exportFormat=tsv",
            "application/pdf": "https://docs.google.com/spreadsheets/export?id=1yKgRj62UCOBcabx7NiMjRrpsmWGAmohmkHfVKjnxp5I&exportFormat=pdf",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": "https://docs.google.com/spreadsheets/export?id=1yKgRj62UCOBcabx7NiMjRrpsmWGAmohmkHfVKjnxp5I&exportFormat=xlsx",
            "text/csv": "https://docs.google.com/spreadsheets/export?id=1yKgRj62UCOBcabx7NiMjRrpsmWGAmohmkHfVKjnxp5I&exportFormat=csv",
            "application/zip": "https://docs.google.com/spreadsheets/export?id=1yKgRj62UCOBcabx7NiMjRrpsmWGAmohmkHfVKjnxp5I&exportFormat=zip"
          },
          "parents": [
            "1S_XSwz1z3EH4Cnivl7Ls_RGTqlO7L0bb"
          ],
          "thumbnailLink": "https://lh3.googleusercontent.com/drive-storage/AJQWtBP6DBI4V5NAfKSIYwilD2wv058AQaU_of9IslAMggZmhwUCeKpg8yQw1eJr_RUwAtHsKIWKb3Cs_itdfVIFWCrEFyDPgs7pohFbEoSX_1ecPe5a5QRJrGvNsGw=s220",
          "iconLink": "https://drive-thirdparty.googleusercontent.com/16/type/application/vnd.google-apps.spreadsheet",
          "shared": false,
          "lastModifyingUser": {
            "displayName": "Chase Hannegan",
            "kind": "drive#user",
            "me": true,
            "permissionId": "12966415566161546567",
            "emailAddress": "hanneganc@gmail.com",
            "photoLink": "https://lh3.googleusercontent.com/a/ACg8ocIleOZQ2ZsPeLbzVj8DXpAHCLbIOAH-n0vULXMv2zSg2vBt=s64"
          },
          "owners": [
            {
              "displayName": "Chase Hannegan",
              "kind": "drive#user",
              "me": true,
              "permissionId": "12966415566161546567",
              "emailAddress": "hanneganc@gmail.com",
              "photoLink": "https://lh3.googleusercontent.com/a/ACg8ocIleOZQ2ZsPeLbzVj8DXpAHCLbIOAH-n0vULXMv2zSg2vBt=s64"
            }
          ],
          "webViewLink": "https://docs.google.com/spreadsheets/d/1yKgRj62UCOBcabx7NiMjRrpsmWGAmohmkHfVKjnxp5I/edit",
          "size": "2796",
          "viewersCanCopyContent": true,
          "permissions": [
            {
              "id": "12966415566161546567",
              "displayName": "Chase Hannegan",
              "type": "user",
              "kind": "drive#permission",
              "photoLink": "https://lh3.googleusercontent.com/a/ACg8ocIleOZQ2ZsPeLbzVj8DXpAHCLbIOAH-n0vULXMv2zSg2vBt=s64",
              "emailAddress": "hanneganc@gmail.com",
              "role": "owner",
              "deleted": false,
              "pendingOwner": false
            }
          ],
          "hasThumbnail": true,
          "spaces": [
            "drive"
          ],
          "id": "1yKgRj62UCOBcabx7NiMjRrpsmWGAmohmkHfVKjnxp5I",
          "name": "Company Sales Data",
          "starred": false,
          "trashed": false,
          "explicitlyTrashed": false,
          "createdTime": "2025-03-12T18:26:50.916Z",
          "modifiedTime": "2025-03-12T18:41:47.032Z",
          "modifiedByMeTime": "2025-03-12T18:41:47.032Z",
          "viewedByMeTime": "2025-03-12T18:41:47.032Z",
          "quotaBytesUsed": "2796",
          "version": "14",
          "ownedByMe": true,
          "isAppAuthorized": false,
          "capabilities": {
            "canChangeViewersCanCopyContent": true,
            "canEdit": true,
            "canCopy": true,
            "canComment": true,
            "canAddChildren": false,
            "canDelete": true,
            "canDownload": true,
            "canListChildren": false,
            "canRemoveChildren": false,
            "canRename": true,
            "canTrash": true,
            "canReadRevisions": true,
            "canChangeCopyRequiresWriterPermission": true,
            "canMoveItemIntoTeamDrive": true,
            "canUntrash": true,
            "canModifyContent": true,
            "canMoveItemOutOfDrive": true,
            "canAddMyDriveParent": false,
            "canRemoveMyDriveParent": true,
            "canMoveItemWithinDrive": true,
            "canShare": true,
            "canMoveChildrenWithinDrive": false,
            "canModifyContentRestriction": true,
            "canChangeSecurityUpdateEnabled": false,
            "canAcceptOwnership": false,
            "canReadLabels": false,
            "canModifyLabels": false,
            "canModifyEditorContentRestriction": true,
            "canModifyOwnerContentRestriction": true,
            "canRemoveContentRestriction": false,
            "canDisableInheritedPermissions": false,
            "canEnableInheritedPermissions": true
          },
          "thumbnailVersion": "5",
          "modifiedByMe": true,
          "permissionIds": [
            "12966415566161546567"
          ],
          "linkShareMetadata": {
            "securityUpdateEligible": false,
            "securityUpdateEnabled": true
          },
          "inheritedPermissionsDisabled": false
        }
      }
    ]
  },
  "versionId": "4eeda0ef-8798-4a40-8ddb-f64263c3c31c",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-13T00:53:47.612Z",
      "updatedAt": "2025-08-13T00:53:47.612Z",
      "role": "workflow:owner",
      "workflowId": "l53ruRcuopLiS8Ca",
      "projectId": "u6WAzHuF44mOtWuS",
      "project": {
        "createdAt": "2025-07-31T11:39:40.287Z",
        "updatedAt": "2025-07-31T11:39:43.247Z",
        "id": "u6WAzHuF44mOtWuS",
        "name": "Vincent Laroche <info@oneheadhair.com>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-07-31T11:39:40.287Z",
            "updatedAt": "2025-07-31T11:39:40.287Z",
            "role": "project:personalOwner",
            "userId": "dff742c4-a194-47d4-8a7c-d82d35aabc7e",
            "projectId": "u6WAzHuF44mOtWuS",
            "user": {
              "createdAt": "2025-07-31T11:39:38.886Z",
              "updatedAt": "2025-08-13T03:03:26.000Z",
              "id": "dff742c4-a194-47d4-8a7c-d82d35aabc7e",
              "email": "info@oneheadhair.com",
              "firstName": "Vincent",
              "lastName": "Laroche",
              "personalizationAnswers": null,
              "settings": {
                "userActivated": true,
                "firstSuccessfulWorkflowId": "VsaLkCvopP9TByf8",
                "userActivatedAt": 1754031653108,
                "easyAIWorkflowOnboarded": true,
                "npsSurvey": {
                  "waitingForResponse": true,
                  "ignoredCount": 0,
                  "lastShownAt": 1754957886802
                }
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-08-13",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}
